<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Ok-win Colour Prediction</title>
  <style>
    :root{--card-bg:#0f1724;--muted:#94a3b8}
    body{
      font-family: Inter, Arial, sans-serif;
      margin:0; min-height:100vh;
      display:flex;align-items:center;justify-content:center;
      background: linear-gradient(180deg,#071127,#071a2a);
      color:#e6eef8;padding:2rem;
    }
    .wrap{width:100%;max-width:900px;background:rgba(255,255,255,0.03);
      border-radius:12px;padding:1.5rem;box-shadow:0 8px 30px rgba(2,6,23,0.6)}
    h1{margin:0 0 0.5rem 0;font-size:1.4rem}
    p.lead{color:var(--muted);margin:0 0 1rem 0}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:1rem}
    .controls{padding:1rem;border-radius:8px;background:rgba(255,255,255,0.02)}
    .preview{display:flex;flex-direction:column;gap:0.75rem;padding:1rem;border-radius:8px;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01))}
    label{display:block;font-size:.85rem;color:var(--muted);margin-bottom:.35rem}
    input[type="text"]{width:100%;padding:.5rem;border-radius:6px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:inherit}
    input[type="color"]{width:48px;height:48px;border:0;padding:0;background:transparent}
    .swatch{height:120px;border-radius:8px;border:1px solid rgba(0,0,0,0.25);display:flex;align-items:center;justify-content:center;font-weight:600}
    .info{margin-top:.5rem}
    .row{display:flex;gap:.5rem;align-items:center}
    .chip{padding:.35rem .6rem;border-radius:999px;background:rgba(0,0,0,0.2);font-size:.9rem}
    .muted{color:var(--muted);font-size:.9rem}
    footer{margin-top:1rem;color:var(--muted);font-size:.85rem}
    @media(max-width:720px){.grid{grid-template-columns:1fr}}
    button{background:transparent;color:inherit;border:1px solid rgba(255,255,255,0.08);padding:.45rem .6rem;border-radius:8px;cursor:pointer}
  </style>
</head>
<body>
  <div class="wrap" role="main">
    <h1>Ok-win Colour Prediction</h1>
    <p class="lead">रंग चुनो — नाम और complementary / readable text color पाएँ। Hex, color picker या common name डालो।</p>

    <div class="grid">
      <div class="controls">
        <label for="colorPicker">Color picker</label>
        <div class="row">
          <input id="colorPicker" type="color" value="#1e90ff" />
          <div style="flex:1;margin-left:.6rem">
            <label for="colorInput" class="muted">Hex या नाम (उदा. #ff0000 या tomato)</label>
            <input id="colorInput" type="text" value="#1e90ff" placeholder="#RRGGBB या नाम"/>
          </div>
        </div>

        <div style="margin-top:1rem">
          <button id="predictBtn">Predict</button>
          <button id="copyHex" style="margin-left:.5rem">Copy HEX</button>
        </div>

        <div class="info" id="infoBox" aria-live="polite" style="margin-top:1rem">
          <div class="muted">Predicted name: <span id="name">DodgerBlue</span></div>
          <div class="muted">HEX: <span id="hex">#1E90FF</span></div>
          <div class="muted">RGB: <span id="rgb">30,144,255</span></div>
          <div class="muted">Readable text color: <span id="textChoice">white</span></div>
        </div>
      </div>

      <div class="preview">
        <div id="swatch" class="swatch" style="background:#1e90ff;color:white">
          <div>
            <div style="font-size:.95rem">Preview</div>
            <div style="font-size:.8rem" id="swatchLabel">#1E90FF</div>
          </div>
        </div>

        <div style="display:flex;gap:.6rem;align-items:center;flex-wrap:wrap">
          <div>
            <div class="muted">Complementary</div>
            <div class="chip" id="comp"></div>
          </div>
          <div>
            <div class="muted">Triadic</div>
            <div class="row">
              <div class="chip" id="tri1"></div>
              <div class="chip" id="tri2"></div>
            </div>
          </div>
        </div>

        <div style="margin-top:.6rem">
          <label class="muted">Nearest common color names (top 3)</label>
          <div id="nearest" style="display:flex;gap:.4rem;margin-top:.4rem;flex-wrap:wrap"></div>
        </div>
      </div>
    </div>

    <footer>Save this file as <code>index.html</code> and upload to your repo to make it live via GitHub Pages.</footer>
  </div>

  <script>
    // small list of common web colors for name prediction
    const colorNames = {
      "black":"#000000","white":"#ffffff","red":"#ff0000","green":"#008000","blue":"#0000ff",
      "yellow":"#ffff00","cyan":"#00ffff","magenta":"#ff00ff","orange":"#ffa500","purple":"#800080",
      "pink":"#ffc0cb","brown":"#a52a2a","gray":"#808080","silver":"#c0c0c0","maroon":"#800000",
      "navy":"#000080","teal":"#008080","olive":"#808000","lime":"#00ff00","dodgerblue":"#1e90ff",
      "tomato":"#ff6347","gold":"#ffd700","indigo":"#4b0082","coral":"#ff7f50"
    };

    function clampHex(h){ return h.length===4 ? '#'+h[1]+h[1]+h[2]+h[2]+h[3]+h[3] : h; }

    function hexToRgb(hex){
      hex = hex.replace('#','');
      if(hex.length===3) hex = hex.split('').map(c=>c+c).join('');
      const n=parseInt(hex,16);
      return [(n>>16)&255, (n>>8)&255, n&255];
    }
    function rgbToHex(r,g,b){
      return '#'+[r,g,b].map(x=>x.toString(16).padStart(2,'0')).join('').toUpperCase();
    }
    function rgbToHsl(r,g,b){
      r/=255;g/=255;b/=255;
      const max=Math.max(r,g,b), min=Math.min(r,g,b);
      let h=0, s=0, l=(max+min)/2;
      if(max!==min){
        const d=max-min;
        s = l>0.5 ? d/(2-max-min) : d/(max+min);
        switch(max){
          case r: h = (g-b)/d + (g<b?6:0); break;
          case g: h = (b-r)/d + 2; break;
          case b: h = (r-g)/d + 4; break;
        }
        h /= 6;
      }
      return [Math.round(h*360), Math.round(s*100), Math.round(l*100)];
    }

    function getComplementary(hex){
      const [r,g,b]=hexToRgb(hex);
      return rgbToHex(255-r,255-g,255-b);
    }
    function getTriadic(hex){
      // convert to HSL, shift hue ±120
      const [r,g,b]=hexToRgb(hex);
      const [h,s,l]=rgbToHsl(r,g,b);
      function hslToRgb(h,s,l){
        h/=360; s/=100; l/=100;
        if(s===0) { const v=Math.round(l*255); return [v,v,v]; }
        const q = l < 0.5 ? l*(1+s) : l + s - l*s;
        const p = 2*l - q;
        const hue2rgb=(p,q,t)=>{
          if(t<0) t+=1; if(t>1) t-=1;
          if(t<1/6) return p + (q-p)*6*t;
          if(t<1/2) return q;
          if(t<2/3) return p + (q-p)*(2/3 - t)*6;
          return p;
        };
        const r = Math.round(hue2rgb(p,q,h+1/3)*255);
        const g = Math.round(hue2rgb(p,q,h)*255);
        const b = Math.round(hue2rgb(p,q,h-1/3)*255);
        return [r,g,b];
      }
      const t1 = hslToRgb((h+120)%360, s, l);
      const t2 = hslToRgb((h+240)%360, s, l);
      return [rgbToHex(...t1), rgbToHex(...t2)];
    }

    function nearestNames(hex, n=3){
      const target = hexToRgb(hex);
      const dist = (a,b)=> (a[0]-b[0])**2 + (a[1]-b[1])**2 + (a[2]-b[2])**2;
      const arr = Object.entries(colorNames).map(([name,h])=>({name,hex:h,rgb:hexToRgb(h)}));
      arr.sort((A,B)=>dist(A.rgb,target)-dist(B.rgb,target));
      return arr.slice(0,n);
    }

    function bestTextColor(hex){
      const [r,g,b]=hexToRgb(hex);
      // Perceived luminance
      const lum = 0.2126*r + 0.7152*g + 0.0722*b;
      return lum > 140 ? 'black' : 'white';
    }

    // DOM
    const picker = document.getElementById('colorPicker');
    const input = document.getElementById('colorInput');
    const predictBtn = document.getElementById('predictBtn');
    const swatch = document.getElementById('swatch');
    const swatchLabel = document.getElementById('swatchLabel');
    const nameEl = document.getElementById('name');
    const hexEl = document.getElementById('hex');
    const rgbEl = document.getElementById('rgb');
    const textChoice = document.getElementById('textChoice');
    const compEl = document.getElementById('comp');
    const tri1 = document.getElementById('tri1');
    const tri2 = document.getElementById('tri2');
    const nearestDiv = document.getElementById('nearest');
    const copyBtn = document.getElementById('copyHex');

    // sync picker <-> input
    picker.addEventListener('input', e=>{
      input.value = picker.value.toUpperCase();
      runPrediction(picker.value);
    });

    input.addEventListener('change', e=>{
      let v = input.value.trim();
      if(!v) return;
      // if name given, map to hex if possible
      const lname = v.toLowerCase();
      if(colorNames[lname]) { v = colorNames[lname]; }
      try{
        v = clampHex(v);
        const rgb = hexToRgb(v); // may throw if invalid
        picker.value = rgbToHex(...rgb);
        runPrediction(picker.value);
      }catch(err){
        alert('Invalid color. Use hex like #RRGGBB or a common name (e.g. tomato).');
      }
    });

    predictBtn.addEventListener('click', ()=> {
      input.dispatchEvent(new Event('change'));
    });

    copyBtn.addEventListener('click', async ()=>{
      const text = hexEl.textContent;
      try{
        await navigator.clipboard.writeText(text);
        copyBtn.textContent = 'Copied!';
        setTimeout(()=> copyBtn.textContent = 'Copy HEX', 1200);
      }catch(e){
        alert('Clipboard failed. Manually copy: ' + text);
      }
    });

    function runPrediction(hex){
      hex = clampHex(hex).toUpperCase();
      const rgb = hexToRgb(hex).map(n=>n);
      const nameCandidates = nearestNames(hex, 3);
      nameEl.textContent = nameCandidates[0].name;
      hexEl.textContent = hex;
      rgbEl.textContent = rgb.join(',');
      textChoice.textContent = bestTextColor(hex);
      swatch.style.background = hex;
      swatch.style.color = (bestTextColor(hex) === 'white' ? '#FFFFFF' : '#000000');
      swatchLabel.textContent = hex;

      const comp = getComplementary(hex);
      compEl.textContent = comp; compEl.style.background = comp; compEl.style.color = bestTextColor(comp);

      const tri = getTriadic(hex);
      tri1.textContent = tri[0]; tri1.style.background = tri[0]; tri1.style.color = bestTextColor(tri[0]);
      tri2.textContent = tri[1]; tri2.style.background = tri[1]; tri2.style.color = bestTextColor(tri[1]);

      nearestDiv.innerHTML = '';
      nameCandidates.forEach(c=>{
        const d = document.createElement('div');
        d.className = 'chip';
        d.textContent = c.name + ' (' + c.hex.toUpperCase() + ')';
        d.style.background = c.hex;
        d.style.color = bestTextColor(c.hex);
        nearestDiv.appendChild(d);
      });
    }

    // initial run
    runPrediction(picker.value);
  </script>
</body>
</html>
